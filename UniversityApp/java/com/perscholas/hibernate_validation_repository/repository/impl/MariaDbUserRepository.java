//package com.perscholas.hibernate_validation_repository.repository.impl;
//
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//import java.util.Objects;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.jdbc.core.RowMapper;
//import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
//import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
//import org.springframework.jdbc.support.GeneratedKeyHolder;
//import org.springframework.jdbc.support.KeyHolder;
//import org.springframework.stereotype.Repository;
//
//import com.perscholas.hibernate_validation_repository.models.Register;
//import com.perscholas.hibernate_validation_repository.models.User;
//import com.perscholas.hibernate_validation_repository.models.UserTest;
//import com.perscholas.hibernate_validation_repository.repositoryIn.UserRepository;
//
//@Repository("mariaDbUserRepository")
//public class MariaDbUserRepository implements UserRepository {
//
//	@Autowired
//	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
//	
//	@Override
//	public Integer addUser(Register user) {
//		Integer id = -1;
//		/* The class MapSqlParameterSource behaves much like a Map and holds 
//		 * key-value pairs. The keys can be included in a query string to 
//		 * accept values associated with the keys such as illustrated in the 
//		 * "createCourseSql" string below. */
//		MapSqlParameterSource params = new MapSqlParameterSource();
//		
//		params.addValue("firstname", user.getFirstname());
//		params.addValue("middlename", user.getMiddlename());
//		params.addValue("lastname", user.getLastname());
//		params.addValue("preferredname", user.getPreferredname());
//		params.addValue("gender", user.getGender());
//		params.addValue("email", user.getEmail());
//		params.addValue("address1", user.getAddress1());
//		params.addValue("address2", user.getAddress2());
//		params.addValue("city", user.getCity());
//		params.addValue("state", user.getState());
//		params.addValue("postalcode", user.getPostalcode());
//		params.addValue("username", user.getUsername());
//		params.addValue("password", user.getPassword());
//		params.addValue("user_role", user.getUser_role());
//		
//		
//		String createAddSql = "insert into users (firstname, middlename, lastname, preferredname, gender, email, address1, address2, city, state, "
//				+ "postalcode, username, password, user_role) values "
//				+ "(:firstname, :middlename, :lastname, :preferredname, :gender, :email, :address1, :address2, :city, :state, :postalcode, :username, :password, :user_role)";
//		
////		String createAddSql = "insert into users (firstname, middlename) values (:firstname, :middlename)";
//		
//		/* The KeyHolder instance will receive the primary key generated by 
//		 * the database.*/
//		KeyHolder keyHolder = new GeneratedKeyHolder();
//		Integer createResult = mariaDbJdbcTemplate.update(createAddSql, 
//				params, keyHolder);
//		/* The JdbcTemplate "update" method returns the number of rows 
//		 * affected. If the number is 0, then it indicates the insert 
//		 * attempt failed. */
//		if (createResult > 0) {
//			/* The Database returns a BigInteger that needs to be cast to an 
//			 * int or Integer. */
//			id = keyHolder.getKey().intValue();
//		}
//		return id;
//	}
//
//	
//	//***********************************************************
//	
//	@Override
//	public Integer addUserTest(UserTest userTest) {
//		Integer id = -1;
//		/* The class MapSqlParameterSource behaves much like a Map and holds 
//		 * key-value pairs. The keys can be included in a query string to 
//		 * accept values associated with the keys such as illustrated in the 
//		 * "createCourseSql" string below. */
//		MapSqlParameterSource params = new MapSqlParameterSource();
//		
//		params.addValue("firstname", userTest.getFirstname());
//		params.addValue("middlename", userTest.getMiddlename());
//		String createAddSql = "insert into usertest (first_name, middle_name) values (:firstname, :middlename)";
//		
//		/* The KeyHolder instance will receive the primary key generated by 
//		 * the database.*/
//		KeyHolder keyHolder = new GeneratedKeyHolder();
//		Integer createResult = mariaDbJdbcTemplate.update(createAddSql, 
//				params, keyHolder);
//		/* The JdbcTemplate "update" method returns the number of rows 
//		 * affected. If the number is 0, then it indicates the insert 
//		 * attempt failed. */
//		if (createResult > 0) {
//			/* The Database returns a BigInteger that needs to be cast to an 
//			 * int or Integer. */
//			id = keyHolder.getKey().intValue();
//		}
//		return id;
//	}
//	
//	//***********************************************************
//	
//	private final class UserMapper implements RowMapper<User> {
//
//		@Override
//		public User mapRow(ResultSet rs, int rowNum) throws SQLException {
//			User add = new User();
//			add.setUserId(rs.getInt(1));
//			add.setFirstname(rs.getString(2));
//			add.setMiddlename(rs.getString(3));
//			add.setLastname(rs.getString(4));
//			add.setPreferredname(rs.getString(5));
//			add.setGender(rs.getString(6));
//			add.setEmail(rs.getString(7));
//			add.setAddress1(rs.getString(8));
//			add.setAddress2(rs.getString(9));
//			add.setCity(rs.getString(10));
//			add.setState(rs.getString(11));
//			add.setPostalcode(rs.getInt(12));
//			add.setUsername(rs.getString(13));
//			add.setPassword(rs.getString(14));
//			add.setUser_role(rs.getInt(15));
//			
//			return add;
//		}
//	}
//
//	@Override
//	public User findUserByUsername(User input) {
//	
//		String selectUser = "SELECT * FROM users where username = :username";
//		
//		Map<String, Object> params = new HashMap<String, Object>();
//		
//		System.out.println(input.getUsername());
//		System.out.println(input.getPassword());
//		
//		params.put("username", input.getUsername());
//		
//		
//		try {
//			User result = (User)mariaDbJdbcTemplate.queryForObject(selectUser, params, new UserMapper());
//			return result;
//		}catch(Exception e) {
//			
//			System.out.println("Unable to find it");
//			return null;
//		}
//			
//	}
//	
//}



package com.perscholas.hibernate_validation_repository.repository.impl;

import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import com.perscholas.hibernate_validation_repository.models.Register;

//import com.perscholas.hibernate_validation_repository.models.User;
//import com.perscholas.hibernate_validation_repository.models.UserTest;
import com.perscholas.hibernate_validation_repository.repositoryIn.UserRepository;

@Repository("mariaDbUserRepository")
public class MariaDbUserRepository implements UserRepository {

	@Autowired
	private NamedParameterJdbcTemplate mariaDbJdbcTemplate;
	
	@Override
	public Integer addUser(Register user) {
		Integer id = -1;
		/* The class MapSqlParameterSource behaves much like a Map and holds 
		 * key-value pairs. The keys can be included in a query string to 
		 * accept values associated with the keys such as illustrated in the 
		 * "createCourseSql" string below. */
		MapSqlParameterSource params = new MapSqlParameterSource();
		
		params.addValue("firstname", user.getFirstName());
		params.addValue("lastname", user.getLastName());
		params.addValue("email", user.getEmail());
		params.addValue("phone", user.getPhone());
		params.addValue("gender", user.getGender());
		params.addValue("password", user.getPassword());
		params.addValue("confirmpassword", user.getConfirmpassword());
		params.addValue("username", user.getUsername());

		
		String createAddSql = "insert into case_study.users (firstName,lastName,email,phone,gender,"
				+ "password, confirmpassword, username ) values "
				+ "(:firstname, :lastname, :email, :phone, :gender, :password, :confirmpassword, :username)";
		
//		String createAddSql = "insert into users (firstname, middlename) values (:firstname, :middlename)";
		
		/* The KeyHolder instance will receive the primary key generated by 
		 * the database.*/
		KeyHolder keyHolder = new GeneratedKeyHolder();
		Integer createResult = mariaDbJdbcTemplate.update(createAddSql, 
				params, keyHolder);
		/* The JdbcTemplate "update" method returns the number of rows 
		 * affected. If the number is 0, then it indicates the insert 
		 * attempt failed. */
		if (createResult > 0) {
			/* The Database returns a BigInteger that needs to be cast to an 
			 * int or Integer. */
			id = keyHolder.getKey().intValue();
		}
		return id;
	}

	
	//***********************************************************
	
//	@Override
//	public Integer addUserTest(RegisterTest userTest) {
//		Integer id = -1;
//		/* The class MapSqlParameterSource behaves much like a Map and holds 
//		 * key-value pairs. The keys can be included in a query string to 
//		 * accept values associated with the keys such as illustrated in the 
//		 * "createCourseSql" string below. */
//		MapSqlParameterSource params = new MapSqlParameterSource();
//		
//		params.addValue("firstname", userTest.getFirstname());
//		params.addValue("lastname", userTest.getLastname());
//		String createAddSql = "insert into case_study.usertest (first_name, last_name) values (:firstname, :lastname)";
//		
//		/* The KeyHolder instance will receive the primary key generated by 
//		 * the database.*/
//		KeyHolder keyHolder = new GeneratedKeyHolder();
//		Integer createResult = mariaDbJdbcTemplate.update(createAddSql, 
//				params, keyHolder);
//		/* The JdbcTemplate "update" method returns the number of rows 
//		 * affected. If the number is 0, then it indicates the insert 
//		 * attempt failed. */
//		if (createResult > 0) {
//			/* The Database returns a BigInteger that needs to be cast to an 
//			 * int or Integer. */
//			id = keyHolder.getKey().intValue();
//		}
//		return id;
//	}
	
	//***********************************************************
	
	private final class UserMapper implements RowMapper<Register> {

		@Override
		public Register mapRow(ResultSet rs, int rowNum) throws SQLException {
			Register add = new Register();
			add.setUserId(rs.getInt(1));
			add.setFirstName(rs.getString(2));
			add.setLastName(rs.getString(3));
			add.setEmail(rs.getString(4));
			add.setPhone(rs.getString(5));
			add.setGender(rs.getString(6));
			add.setPassword(rs.getString(7));
			add.setConfirmpassword(rs.getString(8));
			add.setUsername(rs.getString(9));


			
			return add;
		}
	}
	
	

	@Override
	public Register findUserByUsername(Register input) {
	
		String selectUser = "SELECT * FROM case_study.users where username = :username";
		
		Map<String, Object> params = new HashMap<String, Object>();
		
		System.out.println(input.getUsername());
		System.out.println(input.getPassword());
		
		params.put("username", input.getUsername());
		
		
		try {
			Register result = (Register)mariaDbJdbcTemplate.queryForObject(selectUser, params, new UserMapper());
			return result;
		}catch(Exception e) {
			
			System.out.println("Unable to find it");
			return null;
		}
			
	}
	

	@Override
	public List<Register> getAllByUserId(Integer userId) throws ClassNotFoundException, IOException, SQLException {
		String selectAllByAddressId = "SELECT * FROM case_study.users"
				+ " WHERE `userId` = " + userId;
		List<Register> result = mariaDbJdbcTemplate.query(selectAllByAddressId, new UserMapper());
		return result;
	}
	
	

	
	
}


